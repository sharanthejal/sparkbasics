#Spark sorting and Ranking
#sortByKey and groupByKey

-- sortByKey([ascending], [numTasks])
-- When called on a dataset of (K, V) pairs where K implements Ordered, returns a dataset of (K, V) pairs sorted by keys in ascending or descending order, as specified in the boolean ascending argument.

-- Requirement: Let us get the details of orders sorted by order_status
-- order_status presents at fourth position in orders 

val path= "/user/hive/warehouse/retail_db"
-- Ascending order by default
val orders= sc.textFile(path+"/orders").map(rec=> (rec.split(",")(3),rec)).sortByKey()
val orders= sc.textFile(path+"/orders").map(rec=> (rec.split(",")(3),rec)).sortByKey(true)

-- Descending Order as false is provided as argument in sortByKey function
val orders= sc.textFile(path+"/orders").map(rec=> (rec.split(",")(3),rec)).sortByKey(false)
orders.collect.foreach(println)

-- Requirement: orders sorted by status and date in descending order
val orders= sc.textFile(path+"/orders").map(rec=> ((rec.split(",")(3),rec.split(",")(1)),rec)).sortByKey(false)
scala> orders.first
res3: ((String, String), String) = ((SUSPECTED_FRAUD,2014-07-24 00:00:00.0),57621,2014-07-24 00:00:00.0,6230,SUSPECTED_FRAUD)

-- It will take the second field which is nothing but orders 
orders.map(_._2).collect.foreach(println)

orders.filter(e=> e.).collect.foreach(println)



-- let us get top 5 products in each category from products
val products = sc.textFile(path + "/products")
scala> products.first
res5: String = 1,2,Quest Q64 10 FT. x 10 FT. Slant Leg Instant U,,59.98,http://images.acmesports.sports/Quest+Q64+10+FT.+x+10+FT.+Slant+Leg+Instant+Up+Canopy

val productsGroupByCategory = products.
  map(product => {
    val p = product.split(",")
    (p(1).toInt, product)
  }).
groupByKey

-- or to avoid null values

val productsGroupByCategory = products.
  filter(product => product.split(",")(4) != "").
  map(product => {
    val p = product.split(",")
    (p(1).toInt, product)
  }).
groupByKey

val i= productsGroupByCategory.first

productsGroupByCategory.
  sortByKey().
  flatMap(rec => {
    rec._2.toList.sortBy(r => -r.split(",")(4).toFloat).take(5)
  }).
  take(1).
  foreach(println)
  
  productsGroupByCategory.sortByKey().flatMap(_._2.toList.sortBy(r => -r.split(",")(4).toFloat).take(5)).take(10).foreach(println)
  
productsGroupByCategory.sortByKey().map(_._1).collect.foreach(println)
scala>  productsGroupByCategory.sortByKey().map(_._1).collect
res43: Array[Int] = Array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59)

