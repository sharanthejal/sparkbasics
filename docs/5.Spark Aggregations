#Spark Aggregations â€“ reduceByKey and aggregateByKey
-- reduce can be used for total aggregations.
--reduceByKey (uses combiner)
-- reduceByKey(func, [numTasks])
When called on a dataset of (K, V) pairs, returns a dataset of (K, V) pairs where the values for each key are aggregated 
using the given reduce function func, which must be of type (V,V) => V. 
Like in groupByKey, the number of reduce tasks is configurable through an optional second argument.

-- aggregateByKey (uses combiner)
-- aggregateByKey(zeroValue)(seqOp, combOp, [numTasks])
When called on a dataset of (K, V) pairs, returns a dataset of (K, U) pairs where the values for each key are aggregated
using the given combine functions and a neutral "zero" value.
Allows an aggregated value type that is different than the input value type, while avoiding unnecessary allocations. 
Like in groupByKey, the number of reduce tasks is configurable through an optional second argument.

groupByKey  -doesn't use combiner

We will use order_items. It has six fields
order_item_id
order_item_order_id
order_item_product_id
order_item_quantity
order_item_subtotal
order_item_product_price

-- Requirement: let us compute revenue for each order. We have to group by order_item_order_id and get the revenue for each order. We should use reduceByKey as it is simple to implement.

val path= "/user/hive/warehouse/retail_db"
val rdd = sc.textFile(path + "/order_items")
val orderItems= rdd.map(oi=> (oi.split(",")(1).toInt, oi.split(",")(4).toFloat))

-- Compute revenue for each order
orderItems.reduceByKey((total, orderItemSubtotal)=> total+orderItemSubtotal).take(100).foreach(println)

-- For getting the revenue for the OrderItem 4, use filter for this as below
scala> orderItems.reduceByKey((total, orderItemSubtotal)=> total+orderItemSubtotal).filter(oi=> oi._1==4).collect().foreach(println)
(4,699.85004)

-- aggregateByKey(zeroValue)(seqOp, combOp, [numTasks])
-- first 
orderItems.aggregateByKey((0.0,0))(
(iTotal, oisubtotal) => (iTotal._1 + oisubtotal, iTotal._2 + 1),
(fTotal, iTotal) => (fTotal._1 + iTotal._1, fTotal._2 + iTotal._2)
).take(100).
foreach(println)

// Compute revenue and number of items for each order using reduceByKey
sc.textFile(path + "/order_items").
  map(orderItem => (orderItem.split(",")(1).toInt, (orderItem.split(",")(4).toFloat, 1))).
  reduceByKey((total, element) => (total._1 + element._1, total._2 + element._2)).
  take(100).
  foreach(println)

